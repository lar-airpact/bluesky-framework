The BlueSky Framework
Testing Module


The Goal
The purpose of these testing module is to run end-to-end tests of the
BlueSky Framework (BSF). That is, these tests run the BSF using the
same system that a user would run the BSF. And a user can execute any
module chain from start to finish. In the end, these tests will
compare the BSF outputs to output files saved within the test. If the
files differ by more than 0.1%, then the tests fail.


Testing Uses
There are three major use-cases for these tests:

1. Users can run these tests by hand, just like they would run the BSF
normally, to test the system. The tests should run quickly and provide
immediate validation that the user's copy of the BSF is working
correctly.
2. Users can create their own tests quickly and easily to test a new
module they are developing. Or to test and see if they are changing the
scientific output of an existing module.
3. These tests are run automatically during the BSF build process as an
end-to-end test to make sure recent changes to the BSF codes have not
changed the scientific results generated by the BSF.


How-to use Testing

The test cases present in the testing module can be run using a normal
BSF configuration (INI) file, like any other BSF run. However, the run
must be made using the '-t' flag on the command line, e.g.:

    ./bluesky -t testing/ex1_one_fire/ex1_one_fire.ini

At the end of the BSF run, the testing module will be run and print
out: (1) "ok" if the tests pass, or (2) "fail", followed by a stack
trace, if the tests fail.


How-to Build a New Test

Building a new test is very simple. First create a new folder in the
Testing directory:

    /bluesky/testing/my_test/

Then add two subfolders:

    /bluesky/testing/my_test/inputs/
    /bluesky/testing/my_test/expected_outputs/

and a configuration (INI) file:

    /bluesky/testing/my_test/my_test.ini

Run the BSF as your normally would. Set up the INI file and the input
files as you normally would. After the BSF has run, copy a select set
of output files to your "expected_outputs" folder. And copy your fire
locations input file and/or met data to the new "inputs" folder.
Finally, edit the INI file you used to run the BSF in the following ways:

1. Add a new output node to the end of your output nodes list:

    outputs=StandardFiles Testing

2. Reassign your input and met areas to your new testing directory:

    TEST_DIR = ${BS_DIR}/testing/my_test/
    INPUT_DIR = ${TEST_DIR}input
    MET_DIR = ${TEST_DIR}input

3. Finally, add a list of output files you want to compare with your
expected outputs:

    [OutputTesting]
    FILES_TO_TEST = fire_locations.csv
